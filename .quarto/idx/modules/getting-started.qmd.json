{"title":"Getting Started","markdown":{"yaml":{"title":"Getting Started","format":"html","execute":{"echo":true,"message":false,"warning":false}},"headingText":"R and RStudio","headingAttr":{"id":"sec-rstudio-setup","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n{{< video https://youtu.be/eimM6pNkYjE title='Getting Started with R and R Studio' >}}\n\nAll of our work for this course will be done in the R language and we will be working with R in RStudio. RStudio is an integrated development environment (IDE) develop by a company named Posit. Please be sure to download and install the most recent versions of R and R Studio from Posit's [website](https://posit.co/download/rstudio-desktop/).\n\nIt is a good idea to periodically update R and RStudio. RStudio will prompt you when it is time to update and you can follow the same process of downloading and installing from the Posit website that we just did here. For R, there are a number of ways to do it, but the easiest is to use packages like [installr](https://www.r-project.org/nosvn/pandoc/installr.html) for Windows and [updateR](https://github.com/AndreaCirilloAC/updateR) for Mac. Here is a good [blog post](https://www.linkedin.com/pulse/3-methods-update-r-rstudio-windows-mac-woratana-ngarmtrakulchol/) that walks you through the steps of how to update R using these packages. I usually update R once a semester.\n\nWe are going to be using a number of R packages throughout the course. One essential set of packages are those that comprise the [Tidyverse](https://www.tidyverse.org/), but especially `readr`, `dplyr`, `ggplot2` and `tidyr`. You can install the entire Tidyverse collection of packages by typing `install.packages(\"tidyverse\")` in your console. We will talk about these packages in detail as we go through the course, but have a look at this [basic description](https://www.tidyverse.org/packages/#import) now to gain some basic familiarity. \n\nAnother thing that you really want to do is to make sure that you have the native pipe operator (`|>`) enabled. In RStudio, go to Tools>Global Options, then go to Code and select \"Use native pipe operator.\" \n\nWhile you are here, you can also go to Appearance to select a different editor theme or to Pane Layout to change how the four panes in R Studio are organized. Next, familiarize yourself with how to expand and minimize the four windows. The most important window that I want to highlight here is the source window. This is where we are going to be working most of the time in this course. And if I tell you to send your source code, I mean to send the file that you are working on in this window. This could be a Quarto document, an R script or an `app.R` file for a Shiny app. \n\nThe next window is the Console and there we also see tabs for Terminal and Background Jobs. The console is where you can run R code one line at a time. The terminal is relevant for more advanced users and we will make some use of it when we talk about publishing Quarto documents. Background Jobs is going to be helpful when we want troubleshoot a Quarto document that is not rendering properly.  \n\nFrom there, the next pane we want to explore is Environment, History, etc. Environment tells us what files are currently available to us. The other important tab here is Git which will be where we push things to GitHub. You will be using this a lot in the course. \n\nFinally, we see a pane with Files, Plots, Packages etc. Files tells us what files are in our project folder and enables us to copy, and delete files associated with our project. Plots is a window for viewing our visualizations. And Packages shows us what packages are available and loaded into our environment.  \n\nBefore you move on to the next section, take some time to familiarize yourself with the various user-friendly buttons and shortcuts available to you like the drop down menu for the pane layout, a spell checker, a button for inserting a code chunk and other features that you can play around with. \n\n## Running and Modifying Code\n\nNext we are going to get our hands dirty by running and modifying some code. \nCreate a folder for this class somewhere on your machine. Next, create a sub-folder called \"classwork\" and save week1-classwork.qmd in that folder. \n\nNow open the week1-classwork.qmd file in RStudio, which has code for 3 data viz activities: map making; democracy over time; and UN voting patterns. \n\nFollow the instructions in the .qmd file to update the code. Click Render to update your HTML output and examine. Complete as much as you can. \n\nAlternatively, you can create your own .qmd file and copy and paste the code below into your file.\n\n### Example 1: Make a map!\n\n```{r}\n#| label: leaflet_map\n\nlibrary(leaflet)\nleaflet() %>% \n  addTiles() %>%   # Add default OpenStreetMap map tiles\n  addMarkers(lat = 38.90243843683386, lng =  -77.0443814477152, \n             label = \"Elliott School of International Affairs\")\n```\n\n### Example 2: Plotting Democracy Over Time\n\n```{r}\n#| label: democracy_over_time\n\n# For nice colors that work for color blind\ncbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nlibrary(vdemdata)\nlibrary(ggplot2)\nlibrary(tidyverse)\n# We will use the data called vdem\nvdem %>%\n  # and then we are going to filter out and only use France and India\n  filter(country_name == \"France\" | country_name == \"India\") %>%\n  # and then we are going to only use years since 1850\n  filter(year > 1849) %>% \n    # and then we are going to use this filtered data to make a plot\n    #with democracy on the y axis and year on the x\n    # we want this plot to use different colors for each country\n    ggplot(., aes(y = v2x_polyarchy, x = year, color=country_name)) +\n      geom_line() +\n      theme_minimal() +\n      xlab(\"Year\") +\n      ylab(\"Electoral Democracy Index\") +\n      ggtitle(\"Electoral Democracy, 1850-2022\") +\n      geom_hline(yintercept = .5, linetype = \"dashed\", color = \"grey\") +\n       scale_color_manual(name=\"Country\", values=c(\"#E69F00\", \"#56B4E9\")) +\n      ylim(0, 1)\n```\n\n### Example 3: UN Voting Trends\n\n```{r echo}\n#| label: un_voting_trends\n\n# = c(\"tidyverse\", \"lubridate\", \"scales\", \"DT\", \"unvotes\", \"pacman\")\n\nlibrary(tidyverse)\nlibrary(unvotes)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(pacman)\n\nunvotes <- un_votes %>%\n  inner_join(un_roll_calls, by = \"rcid\") %>%\n  inner_join(un_roll_call_issues, by = \"rcid\")\n\nunvotes %>%\n  # then filter out to only include the countries we want\n  filter(country %in% c(\"South Africa\", \"United States\", \"France\")) %>%\n  # then make sure R understands the the year variable is a data\n  mutate(year = year(date)) %>%\n  # Then group the data by country and year\n  group_by(country, year, issue) %>%\n  # then take the average Yes votes for each country_year\n  summarize(percent_yes = mean(vote == \"yes\")) %>%\n  # then make a nice plot\n  ggplot(mapping = aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  facet_wrap(~issue) +\n  scale_y_continuous(labels = percent) +\n  scale_color_manual( values=c(\"#E69F00\", \"#56B4E9\", \"#009E73\")) +\n  labs(\n    title = \"Percentage of 'Yes' votes in the UN General Assembly\",\n    subtitle = \"1946 to 2019\",\n    y = \"% Yes\",\n    x = \"Year\",\n    color = \"Country\"\n  )\n```\n\n## Quarto\n\n{{< video https://youtu.be/6QN9ZYURDFg title='Your First Quarto Document' >}}\n\nOnce you have R, R Studio and Quarto installed, you are ready to start integrating text and code with [Quarto](https://quarto.org/). Quarto is an open source publishing platform that enables you to integrate text with code. If you have used [R Markdown](https://rmarkdown.rstudio.com/) before then Quarto will look familiar to you because Quarto is the next generation of R Markdown.\n\nRStudio comes with a version of Quarto already installed, but it can be useful to install the most recent version separately and because doing so will allow you to use Quarto with another IDE like VS Code. You can install the most recent version of Quarto by visiting [this page](https://quarto.org/docs/get-started/) and selecting the version for your operating system.\n\nNow take a little time to create a Quarto project in R Studio and make sure everything is working properly. But before you get started, create a new folder(directory) for this course on your computer somewhere. Once that is done, go to File > New Project. Then select Quarto Project and name the project something like \"test-project\" in the Directory name field. Next, select Browse and navigate to the folder that you created for this course. Select Create Project. \n\nYou will notice that in your new project folder there is a file with an .Rproj extension. The .Rproj file is what tells RStudio which files are associated with the project and it obviates the need to set the working directory. It also makes it possible to share the folder with anyone who is running R and RStudio and have them run your code without having to set a working directory. This is what we refer to as a [project-based workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) and we will use it for every assignment in this class.\n\nNow try rendering the document with the Render toggle button. By default, Quarto renders an .html file that it will open in a browser and save to your project folder. \n\nNext we want to try rendering a .pdf document. To do this, we have to install [tinytex](https://yihui.org/tinytex/), a lightweight version of LaTeX.  To do this, go to the Terminal and type `quarto install tinytex`. Now, change the format from `html` to `pdf` by inserting `format: pdf` in the YAML header. Then render the document again. A .pdf document should open up. \n\nNow take a few minutes and try changing more of the code in the YAML header. You can try changing the title, adding a subtitle (`subtitle:`) or changing the [execution options](https://quarto.org/docs/computations/execution-options.html). By default, Quarto uses the [visual editor](https://quarto.org/docs/visual-editor/) but behind the scenes it is using Markdown. Try and edit some text using the toggle buttons available in the visual editor and then switch to Source to view the underlying Markdown code. Play with the R code chunks embedded in the document or try adding new code chunks.\n\nYou may already have some experience writing in Markdown, which is a lightweight markup language that enables you to format plaintext files. If you have not used Markdown, or if your memory is hazy, don't worry: it is really easy to learn. Have a look at this Markdown [cheat sheet](https://www.markdownguide.org/cheat-sheet/) and try to familiarize yourself with its basic syntax. \nFinally, take some time to get familiar with the [Guide](https://quarto.org/docs/guide/) and [Reference](https://quarto.org/docs/reference/) sections of the Quarto website. Then take a look at the [gallery](https://quarto.org/docs/gallery/) so that you can get an idea of the kinds of things you can produce with Quarto. \n","srcMarkdownNoYaml":"\n\n## R and RStudio {#sec-rstudio-setup}\n\n{{< video https://youtu.be/eimM6pNkYjE title='Getting Started with R and R Studio' >}}\n\nAll of our work for this course will be done in the R language and we will be working with R in RStudio. RStudio is an integrated development environment (IDE) develop by a company named Posit. Please be sure to download and install the most recent versions of R and R Studio from Posit's [website](https://posit.co/download/rstudio-desktop/).\n\nIt is a good idea to periodically update R and RStudio. RStudio will prompt you when it is time to update and you can follow the same process of downloading and installing from the Posit website that we just did here. For R, there are a number of ways to do it, but the easiest is to use packages like [installr](https://www.r-project.org/nosvn/pandoc/installr.html) for Windows and [updateR](https://github.com/AndreaCirilloAC/updateR) for Mac. Here is a good [blog post](https://www.linkedin.com/pulse/3-methods-update-r-rstudio-windows-mac-woratana-ngarmtrakulchol/) that walks you through the steps of how to update R using these packages. I usually update R once a semester.\n\nWe are going to be using a number of R packages throughout the course. One essential set of packages are those that comprise the [Tidyverse](https://www.tidyverse.org/), but especially `readr`, `dplyr`, `ggplot2` and `tidyr`. You can install the entire Tidyverse collection of packages by typing `install.packages(\"tidyverse\")` in your console. We will talk about these packages in detail as we go through the course, but have a look at this [basic description](https://www.tidyverse.org/packages/#import) now to gain some basic familiarity. \n\nAnother thing that you really want to do is to make sure that you have the native pipe operator (`|>`) enabled. In RStudio, go to Tools>Global Options, then go to Code and select \"Use native pipe operator.\" \n\nWhile you are here, you can also go to Appearance to select a different editor theme or to Pane Layout to change how the four panes in R Studio are organized. Next, familiarize yourself with how to expand and minimize the four windows. The most important window that I want to highlight here is the source window. This is where we are going to be working most of the time in this course. And if I tell you to send your source code, I mean to send the file that you are working on in this window. This could be a Quarto document, an R script or an `app.R` file for a Shiny app. \n\nThe next window is the Console and there we also see tabs for Terminal and Background Jobs. The console is where you can run R code one line at a time. The terminal is relevant for more advanced users and we will make some use of it when we talk about publishing Quarto documents. Background Jobs is going to be helpful when we want troubleshoot a Quarto document that is not rendering properly.  \n\nFrom there, the next pane we want to explore is Environment, History, etc. Environment tells us what files are currently available to us. The other important tab here is Git which will be where we push things to GitHub. You will be using this a lot in the course. \n\nFinally, we see a pane with Files, Plots, Packages etc. Files tells us what files are in our project folder and enables us to copy, and delete files associated with our project. Plots is a window for viewing our visualizations. And Packages shows us what packages are available and loaded into our environment.  \n\nBefore you move on to the next section, take some time to familiarize yourself with the various user-friendly buttons and shortcuts available to you like the drop down menu for the pane layout, a spell checker, a button for inserting a code chunk and other features that you can play around with. \n\n## Running and Modifying Code\n\nNext we are going to get our hands dirty by running and modifying some code. \nCreate a folder for this class somewhere on your machine. Next, create a sub-folder called \"classwork\" and save week1-classwork.qmd in that folder. \n\nNow open the week1-classwork.qmd file in RStudio, which has code for 3 data viz activities: map making; democracy over time; and UN voting patterns. \n\nFollow the instructions in the .qmd file to update the code. Click Render to update your HTML output and examine. Complete as much as you can. \n\nAlternatively, you can create your own .qmd file and copy and paste the code below into your file.\n\n### Example 1: Make a map!\n\n```{r}\n#| label: leaflet_map\n\nlibrary(leaflet)\nleaflet() %>% \n  addTiles() %>%   # Add default OpenStreetMap map tiles\n  addMarkers(lat = 38.90243843683386, lng =  -77.0443814477152, \n             label = \"Elliott School of International Affairs\")\n```\n\n### Example 2: Plotting Democracy Over Time\n\n```{r}\n#| label: democracy_over_time\n\n# For nice colors that work for color blind\ncbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nlibrary(vdemdata)\nlibrary(ggplot2)\nlibrary(tidyverse)\n# We will use the data called vdem\nvdem %>%\n  # and then we are going to filter out and only use France and India\n  filter(country_name == \"France\" | country_name == \"India\") %>%\n  # and then we are going to only use years since 1850\n  filter(year > 1849) %>% \n    # and then we are going to use this filtered data to make a plot\n    #with democracy on the y axis and year on the x\n    # we want this plot to use different colors for each country\n    ggplot(., aes(y = v2x_polyarchy, x = year, color=country_name)) +\n      geom_line() +\n      theme_minimal() +\n      xlab(\"Year\") +\n      ylab(\"Electoral Democracy Index\") +\n      ggtitle(\"Electoral Democracy, 1850-2022\") +\n      geom_hline(yintercept = .5, linetype = \"dashed\", color = \"grey\") +\n       scale_color_manual(name=\"Country\", values=c(\"#E69F00\", \"#56B4E9\")) +\n      ylim(0, 1)\n```\n\n### Example 3: UN Voting Trends\n\n```{r echo}\n#| label: un_voting_trends\n\n# = c(\"tidyverse\", \"lubridate\", \"scales\", \"DT\", \"unvotes\", \"pacman\")\n\nlibrary(tidyverse)\nlibrary(unvotes)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(pacman)\n\nunvotes <- un_votes %>%\n  inner_join(un_roll_calls, by = \"rcid\") %>%\n  inner_join(un_roll_call_issues, by = \"rcid\")\n\nunvotes %>%\n  # then filter out to only include the countries we want\n  filter(country %in% c(\"South Africa\", \"United States\", \"France\")) %>%\n  # then make sure R understands the the year variable is a data\n  mutate(year = year(date)) %>%\n  # Then group the data by country and year\n  group_by(country, year, issue) %>%\n  # then take the average Yes votes for each country_year\n  summarize(percent_yes = mean(vote == \"yes\")) %>%\n  # then make a nice plot\n  ggplot(mapping = aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  facet_wrap(~issue) +\n  scale_y_continuous(labels = percent) +\n  scale_color_manual( values=c(\"#E69F00\", \"#56B4E9\", \"#009E73\")) +\n  labs(\n    title = \"Percentage of 'Yes' votes in the UN General Assembly\",\n    subtitle = \"1946 to 2019\",\n    y = \"% Yes\",\n    x = \"Year\",\n    color = \"Country\"\n  )\n```\n\n## Quarto\n\n{{< video https://youtu.be/6QN9ZYURDFg title='Your First Quarto Document' >}}\n\nOnce you have R, R Studio and Quarto installed, you are ready to start integrating text and code with [Quarto](https://quarto.org/). Quarto is an open source publishing platform that enables you to integrate text with code. If you have used [R Markdown](https://rmarkdown.rstudio.com/) before then Quarto will look familiar to you because Quarto is the next generation of R Markdown.\n\nRStudio comes with a version of Quarto already installed, but it can be useful to install the most recent version separately and because doing so will allow you to use Quarto with another IDE like VS Code. You can install the most recent version of Quarto by visiting [this page](https://quarto.org/docs/get-started/) and selecting the version for your operating system.\n\nNow take a little time to create a Quarto project in R Studio and make sure everything is working properly. But before you get started, create a new folder(directory) for this course on your computer somewhere. Once that is done, go to File > New Project. Then select Quarto Project and name the project something like \"test-project\" in the Directory name field. Next, select Browse and navigate to the folder that you created for this course. Select Create Project. \n\nYou will notice that in your new project folder there is a file with an .Rproj extension. The .Rproj file is what tells RStudio which files are associated with the project and it obviates the need to set the working directory. It also makes it possible to share the folder with anyone who is running R and RStudio and have them run your code without having to set a working directory. This is what we refer to as a [project-based workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) and we will use it for every assignment in this class.\n\nNow try rendering the document with the Render toggle button. By default, Quarto renders an .html file that it will open in a browser and save to your project folder. \n\nNext we want to try rendering a .pdf document. To do this, we have to install [tinytex](https://yihui.org/tinytex/), a lightweight version of LaTeX.  To do this, go to the Terminal and type `quarto install tinytex`. Now, change the format from `html` to `pdf` by inserting `format: pdf` in the YAML header. Then render the document again. A .pdf document should open up. \n\nNow take a few minutes and try changing more of the code in the YAML header. You can try changing the title, adding a subtitle (`subtitle:`) or changing the [execution options](https://quarto.org/docs/computations/execution-options.html). By default, Quarto uses the [visual editor](https://quarto.org/docs/visual-editor/) but behind the scenes it is using Markdown. Try and edit some text using the toggle buttons available in the visual editor and then switch to Source to view the underlying Markdown code. Play with the R code chunks embedded in the document or try adding new code chunks.\n\nYou may already have some experience writing in Markdown, which is a lightweight markup language that enables you to format plaintext files. If you have not used Markdown, or if your memory is hazy, don't worry: it is really easy to learn. Have a look at this Markdown [cheat sheet](https://www.markdownguide.org/cheat-sheet/) and try to familiarize yourself with its basic syntax. \nFinally, take some time to get familiar with the [Guide](https://quarto.org/docs/guide/) and [Reference](https://quarto.org/docs/reference/) sections of the Quarto website. Then take a look at the [gallery](https://quarto.org/docs/gallery/) so that you can get an idea of the kinds of things you can produce with Quarto. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"getting-started.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.533","editor":"source","theme":{"light":"cosmo","dark":"cyborg"},"mainfont":"Atkinson Hyperlegible","code-copy":true,"title":"Getting Started"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}