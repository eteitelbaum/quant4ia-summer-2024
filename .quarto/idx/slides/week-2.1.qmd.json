{"title":"Working with V-Dem Data","markdown":{"yaml":{"title":"Working with V-Dem Data","date":"today","date-format":"long","footer":"[IAFF 6501 Website](https://quant4ia.rocks)","logo":"images/iaff6501-logo.png","from":"markdown+emoji","format":{"revealjs":{"theme":["simple","custom.scss"],"transition":"fade","slide-number":true,"multiplex":true,"chalkboard":true}},"execute":{"echo":false,"message":false,"warning":false,"freeze":"auto"}},"headingText":"Where Does Data Come From?","containsRefs":false,"markdown":"\n\n\n<br>\n\nThoughts? :sunglasses: :thought_balloon:\n\n. . .\n\n:::{.incremental}\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A curated collection (e.g. `unvotes`)\n- You can access it through an API\n:::\n\n## The Concept of \"Tidy Data\"\n\n<br>\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg){fig-align=\"center\"}\n\n## The Concept of \"Clean Data\"\n\n<br>\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format\n  - For example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){fig-align=\"center\" width=70%}\n\n## Which of These is Likely Tidy/Clean?\n\n<br>\n\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A curated collection (e.g. `unvotes`)\n- You can access it through an API\n\n## How Do We Get Tidy/Clean Data? \n\n<br>\n\n- Wrangle it ourselves\n- Use a package where it has been wrangled for us\n- Download via an API \n\n## APIs\n\n<br>\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n\n```{mermaid}\n%%| fig-align: center\n%%| fig-width: 7\n%% Note: fig-width option not working as of Quarto 1.4, try again in 1.5 \n\nflowchart LR\n    Client-->|Request|id1[(API)]\n    id1[(API)]-->|Response|Client\n    id1[(API)]-->Server\n    Server-->id1[(API)]\n```\n\n- In our case, we will use APIs to download social science data\n\n## APIs in R\n\n::: {.incremental}\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Much easier than reading in data from messy flat file!\n- We will use two APIs in this course\n  - Varieties of Democracy (V-Dem) through `vdemdata`\n  - World Bank data through `wbstats`\n- But there are many APIs out there (please explore!)\n:::\n\n## This Lesson\n\n<br>\n\n::: {.incremental}\n- Access V-Dem API with `vdemdata` Package\n- This is the only package for V-Dem\n- Just downloads all the data\n- So we have to use `dplyr` functions like `filter()` and `select()`\n:::\n\n## \n\n<br>\n\n- Run this code and see what happens. \n- What is `vdem` and what does it do? \n\n```{r}\n#| label: vdemdata1\n#| echo: true\n\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem \n\n# View the data\nglimpse(democracy)\n```\n\n## `filter()`, `select()`, `mutate()`\n\n<br>\n\n- `filter()` is used to select observations based on their values\n- `select()` is used to select variables\n- `mutate()` is used to create new variables or modifying existing ones\n\n## `filter()`\n\n- Run this code. What do you see?\n- Try changing the year \n- For one year, use `==` instead of `>=`\n- Or try `<=` and see what happens \n\n```{r}\n#| label: vdemdata2\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990) # filter out years less than 1990\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer1\nlibrary(countdown)\ncountdown(minutes = 5, \n          id = \"timer1\", \n          top = \"10%\", \n          right = \"10%\",\n          color_border = \"#fff\",\n          color_text = \"#fff\",\n          color_running_background = \"#42affa\",\n          color_running_text = \"black\",\n          color_finished_background = \"#E5D19D\",\n          color_finished_text = \"#00264A\")\n```\n\n## `=` versus `==`\n\n<br>\n\n- `=` is used to assign values to variables, just like `<-`\n- `==` is used to test if two values are equal to each other\n- So `filter(year == 1990)` will give you just the observations for 1990\n\n## `>=` and `<=`\n\n- `>=` is used to test if a value is greater than or equal to another value\n- `<=` is used to test if a value is less than or equal to another value\n- So `filter(year >= 1990)` will give you the observations for 1990 and later\n- And `filter(year <= 1990)` will give you the observations for 1990 and earlier\n\n## `select()`\n\n- Run this code. What do you see?\n- Now try `v2x_libdem` instead of `v2x_polyarchy`\n- Choose more from the [codebook](https://v-dem.net/documents/24/codebook_v13.pdf) \n\n```{r}\n#| label: vdemdata3\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  select(                  # select (and rename) these variables\n    country = country_name,     # before the = sign is new name  \n    vdem_ctry_id = country_id,  # after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy\n  )\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer2\ncountdown(minutes = 5, \n          id = \"timer2\",\n          top = \"0%\",\n          right = \"5%\")\n```\n\n## `mutate()`\n\n- Modify the code to create new variable that is three times the value of `polyarchy` \n- How about `polyarchy` squared? \n\n```{r}\n#| label: vdemdata4\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015) |> # keep only observations from 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # name before the = sign is new name  \n    vdem_ctry_id = country_id,  # name after the = sign is old name\n    year, \n    polyarchy = v2x_polyarchy \n    ) |>\n  mutate(\n    polyarchy_dbl = polyarchy * 2 # create variable 2X polyarchy\n  )\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer3\ncountdown(minutes = 5, \n          id = \"timer2\",\n          top = \"0%\",\n          right = \"5%\")\n```\n\n## Some Common Arithmetic Operators\n\n<br>\n\n- `+` addition\n- `-` subtraction\n- `*` multiplication\n- `/` division\n- `^` exponentiation (also `**`)\n\n## `vdemdata` Example {.smaller}\n\n```{r}\n#| label: vdemdata5\n#| output: false\n#| echo: true\n\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n\n## \n\nUse `filter()` to select years...\n\n```{r}\n#| label: vdemdata6\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"2-3\"\n\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> # keep 2015\n  select(                 \n    country = country_name,       \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region,\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n\n## \n\nUse `select()` to choose variables...\n\n```{r}\n#| label: vdemdata7\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"4-11\"\n\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> \n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, \n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n\n## \n\nUse `mutate` with `case_match()` to Recode Region....\n\n```{r}\n#| label: vdemdata8\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"12-23\"\n\n# Download the data\ndemocracy <- vdem |>\n  filter(year == 2015)  |> \n  select(                  \n    country = country_name,     \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n```\n\n## Visualize It! \n\n```{r}\n#| label: scatterplot1\n#| eval: false\n#| echo: true\n\nlibrary(ggplot2)\n\nggplot(democracy, aes(x = gdp_pc, y = polyarchy)) + \n  geom_point(aes(color = region)) + \n  geom_smooth(method = \"lm\", linewidth = 1) + \n  scale_x_log10(labels = scales::label_number(prefix = \"$\", suffix = \"k\")) +\n  labs(\n    x= \"GDP per Capita\", \n    y = \"Polyarchy Score\",\n    title = \"Wealth and democracy in 2015\", \n    caption = \"Source: V-Dem Institute\", \n    color = \"Region\"\n    ) +\n  scale_color_viridis_d(option = \"inferno\", end = .8)\n```\n\n## Visualize It! \n\n```{r}\n#| label: scatterplot2\n\nlibrary(ggplot2)\n\nggplot(democracy, aes(x = gdp_pc, y = polyarchy)) + \n  geom_point(aes(color = region)) + \n  geom_smooth(method = \"lm\", linewidth = 1) + \n  scale_x_log10(labels = scales::label_number(prefix = \"$\", suffix = \"k\")) +\n  labs(\n    x= \"GDP per Capita\", \n    y = \"Polyarchy Score\",\n    title = \"Wealth and democracy in 2020\", \n    caption = \"Source: V-Dem Institute\", \n    color = \"Region\"\n    ) +\n  scale_color_viridis_d(option = \"inferno\", end = .8) +\n  theme_minimal()\n```\n\n## Try it Yourself\n\n- Go to the V-Dem [Codebook](https://www.v-dem.net/documents/24/codebook_v13.pdf) \n- Select a democracy indicator from Part 2.1 (high level indicators) to visualize\n- Note the indicator code (e.g. \"v2x_polyarchy\" for the polyarchy score)\n- Change the code and download the data so you can visualize it\n- Now make a scatter plot of your indicator versus GDP\n- Bonus: How would you make a line chart?\n\n```{r}\n#| label: timer4\n\ncountdown(minutes = 10, \n          id = \"timer4\", \n          top = \"5%\", \n          right = \"10%\")\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n## Where Does Data Come From?\n\n<br>\n\nThoughts? :sunglasses: :thought_balloon:\n\n. . .\n\n:::{.incremental}\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A curated collection (e.g. `unvotes`)\n- You can access it through an API\n:::\n\n## The Concept of \"Tidy Data\"\n\n<br>\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg){fig-align=\"center\"}\n\n## The Concept of \"Clean Data\"\n\n<br>\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format\n  - For example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){fig-align=\"center\" width=70%}\n\n## Which of These is Likely Tidy/Clean?\n\n<br>\n\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A curated collection (e.g. `unvotes`)\n- You can access it through an API\n\n## How Do We Get Tidy/Clean Data? \n\n<br>\n\n- Wrangle it ourselves\n- Use a package where it has been wrangled for us\n- Download via an API \n\n## APIs\n\n<br>\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n\n```{mermaid}\n%%| fig-align: center\n%%| fig-width: 7\n%% Note: fig-width option not working as of Quarto 1.4, try again in 1.5 \n\nflowchart LR\n    Client-->|Request|id1[(API)]\n    id1[(API)]-->|Response|Client\n    id1[(API)]-->Server\n    Server-->id1[(API)]\n```\n\n- In our case, we will use APIs to download social science data\n\n## APIs in R\n\n::: {.incremental}\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Much easier than reading in data from messy flat file!\n- We will use two APIs in this course\n  - Varieties of Democracy (V-Dem) through `vdemdata`\n  - World Bank data through `wbstats`\n- But there are many APIs out there (please explore!)\n:::\n\n## This Lesson\n\n<br>\n\n::: {.incremental}\n- Access V-Dem API with `vdemdata` Package\n- This is the only package for V-Dem\n- Just downloads all the data\n- So we have to use `dplyr` functions like `filter()` and `select()`\n:::\n\n## \n\n<br>\n\n- Run this code and see what happens. \n- What is `vdem` and what does it do? \n\n```{r}\n#| label: vdemdata1\n#| echo: true\n\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem \n\n# View the data\nglimpse(democracy)\n```\n\n## `filter()`, `select()`, `mutate()`\n\n<br>\n\n- `filter()` is used to select observations based on their values\n- `select()` is used to select variables\n- `mutate()` is used to create new variables or modifying existing ones\n\n## `filter()`\n\n- Run this code. What do you see?\n- Try changing the year \n- For one year, use `==` instead of `>=`\n- Or try `<=` and see what happens \n\n```{r}\n#| label: vdemdata2\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990) # filter out years less than 1990\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer1\nlibrary(countdown)\ncountdown(minutes = 5, \n          id = \"timer1\", \n          top = \"10%\", \n          right = \"10%\",\n          color_border = \"#fff\",\n          color_text = \"#fff\",\n          color_running_background = \"#42affa\",\n          color_running_text = \"black\",\n          color_finished_background = \"#E5D19D\",\n          color_finished_text = \"#00264A\")\n```\n\n## `=` versus `==`\n\n<br>\n\n- `=` is used to assign values to variables, just like `<-`\n- `==` is used to test if two values are equal to each other\n- So `filter(year == 1990)` will give you just the observations for 1990\n\n## `>=` and `<=`\n\n- `>=` is used to test if a value is greater than or equal to another value\n- `<=` is used to test if a value is less than or equal to another value\n- So `filter(year >= 1990)` will give you the observations for 1990 and later\n- And `filter(year <= 1990)` will give you the observations for 1990 and earlier\n\n## `select()`\n\n- Run this code. What do you see?\n- Now try `v2x_libdem` instead of `v2x_polyarchy`\n- Choose more from the [codebook](https://v-dem.net/documents/24/codebook_v13.pdf) \n\n```{r}\n#| label: vdemdata3\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  select(                  # select (and rename) these variables\n    country = country_name,     # before the = sign is new name  \n    vdem_ctry_id = country_id,  # after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy\n  )\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer2\ncountdown(minutes = 5, \n          id = \"timer2\",\n          top = \"0%\",\n          right = \"5%\")\n```\n\n## `mutate()`\n\n- Modify the code to create new variable that is three times the value of `polyarchy` \n- How about `polyarchy` squared? \n\n```{r}\n#| label: vdemdata4\n#| echo: true\n\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015) |> # keep only observations from 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # name before the = sign is new name  \n    vdem_ctry_id = country_id,  # name after the = sign is old name\n    year, \n    polyarchy = v2x_polyarchy \n    ) |>\n  mutate(\n    polyarchy_dbl = polyarchy * 2 # create variable 2X polyarchy\n  )\n  \nglimpse(democracy)  \n```\n\n```{r}\n#| label: timer3\ncountdown(minutes = 5, \n          id = \"timer2\",\n          top = \"0%\",\n          right = \"5%\")\n```\n\n## Some Common Arithmetic Operators\n\n<br>\n\n- `+` addition\n- `-` subtraction\n- `*` multiplication\n- `/` division\n- `^` exponentiation (also `**`)\n\n## `vdemdata` Example {.smaller}\n\n```{r}\n#| label: vdemdata5\n#| output: false\n#| echo: true\n\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n\n## \n\nUse `filter()` to select years...\n\n```{r}\n#| label: vdemdata6\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"2-3\"\n\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> # keep 2015\n  select(                 \n    country = country_name,       \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region,\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n\n## \n\nUse `select()` to choose variables...\n\n```{r}\n#| label: vdemdata7\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"4-11\"\n\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> \n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, \n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n\n## \n\nUse `mutate` with `case_match()` to Recode Region....\n\n```{r}\n#| label: vdemdata8\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"12-23\"\n\n# Download the data\ndemocracy <- vdem |>\n  filter(year == 2015)  |> \n  select(                  \n    country = country_name,     \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n```\n\n## Visualize It! \n\n```{r}\n#| label: scatterplot1\n#| eval: false\n#| echo: true\n\nlibrary(ggplot2)\n\nggplot(democracy, aes(x = gdp_pc, y = polyarchy)) + \n  geom_point(aes(color = region)) + \n  geom_smooth(method = \"lm\", linewidth = 1) + \n  scale_x_log10(labels = scales::label_number(prefix = \"$\", suffix = \"k\")) +\n  labs(\n    x= \"GDP per Capita\", \n    y = \"Polyarchy Score\",\n    title = \"Wealth and democracy in 2015\", \n    caption = \"Source: V-Dem Institute\", \n    color = \"Region\"\n    ) +\n  scale_color_viridis_d(option = \"inferno\", end = .8)\n```\n\n## Visualize It! \n\n```{r}\n#| label: scatterplot2\n\nlibrary(ggplot2)\n\nggplot(democracy, aes(x = gdp_pc, y = polyarchy)) + \n  geom_point(aes(color = region)) + \n  geom_smooth(method = \"lm\", linewidth = 1) + \n  scale_x_log10(labels = scales::label_number(prefix = \"$\", suffix = \"k\")) +\n  labs(\n    x= \"GDP per Capita\", \n    y = \"Polyarchy Score\",\n    title = \"Wealth and democracy in 2020\", \n    caption = \"Source: V-Dem Institute\", \n    color = \"Region\"\n    ) +\n  scale_color_viridis_d(option = \"inferno\", end = .8) +\n  theme_minimal()\n```\n\n## Try it Yourself\n\n- Go to the V-Dem [Codebook](https://www.v-dem.net/documents/24/codebook_v13.pdf) \n- Select a democracy indicator from Part 2.1 (high level indicators) to visualize\n- Note the indicator code (e.g. \"v2x_polyarchy\" for the polyarchy score)\n- Change the code and download the data so you can visualize it\n- Now make a scatter plot of your indicator versus GDP\n- Bonus: How would you make a line chart?\n\n```{r}\n#| label: timer4\n\ncountdown(minutes = 10, \n          id = \"timer4\", \n          top = \"5%\", \n          right = \"10%\")\n```\n\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","from":"markdown+emoji","output-file":"week-2.1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.533","auto-stretch":true,"editor":"source","title":"Working with V-Dem Data","date":"today","date-format":"long","footer":"[IAFF 6501 Website](https://quant4ia.rocks)","logo":"images/iaff6501-logo.png","theme":["simple","custom.scss"],"transition":"fade","slideNumber":true,"multiplex":true,"chalkboard":true}}},"projectFormats":["html"]}